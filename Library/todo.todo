 (If you install the Todo+ extension you can toggle a task being done with Alt+d and create a new task with Ctrl+Enter)
--------------------------
Maintenace Plugin:
	Configuration Design:
		☐ Support
	Bugs:
		☐ The "critical" warning occurs when an old id is being removed (can occur after manually fixing it)
			Don't warn for ids that are being removed
	Features for the future:
		High Priority:
			☐ Add exceptions to each rule.
			☐ Exclude some books from getting an ID (like the 'Example Book' and 'The Secret Book')
		If books might ever be restored (accidental deletions or fixing books that break rules)?:
			☐ Add title and author to each id in the database and don't delete them without some special confirmation menu. If the book returns, you can then reuse it.
			☐ Add "Delete" button that deletes all copies & the database entry (after a confirmation message)
				> Maybe move to a Recycle Bin for a couple weeks
		☐ If someone deparents AuthorScanLock, the script should identify this and stop running
		☐ A button to add in the covers so you can see what the books look like without pressing play
			> It would add everything with Archivable = false so they won't save
			> A 2nd button to remove them
		☐ Have a "slimmed down" version that verifies book scripts in workshops
		☐ Scan for new books continuously on startup
		☐ Allow dependencies to be added after startup (ie create toolbar etc)


New Book Gui:
	☐ reorganize/redesign from cod's to work on any resolution
	☐ design
	☐ implement

Book Pouch/Inventory:
	Interface:
		✔ Perhaps "Books" or "Inventory" text should be on far left side (rotated 90 degrees), at least when the pouch is closed
		✔ Starts out open (but invisible if you're not carrying any books) @done(20-07-19 12:57)
		✔ A ScrollingFrame (only scrolls if needed) to hold each book @done(20-07-19 12:57)
		☐ It should save books you previously had in your inventory
			This will be automatic when integrated into Profile
		✔ An "x" beside each book to remove it from the inventory @done(20-07-19 12:56)
		✔ When you click on a book in the pouch, it opens up @done(20-07-19 12:56)
	Files Needed:
		> BookPouch in ReplicatedStorage for the class and common behaviour
		> BookPouchServer to handle server-side remotes (to allow client to add/remove books)
		> BookPouchClient and/or BookPouchGui to call those remotes and show the list in the interface
	Integration with Profile:
		☐ Needs BookPouch class with .new/:Serialize/.Deserialize so it can be stored in the data stores and transmitted to the client
		☐ At the end of Profile.server, call InitRemotes on BookPouchServer
	Note:
		We're going to have to rewrite the way books are opened, but in the end there'll be some function where you give it the book id and it opens the book; you could use a dummy function for now (that just prints out the book id)
	Other Tasks:
		☐ BookPouch should store the list of book ids. It can get various information from ReplicatedStorage.BooksClient (this file can be extended if further information is needed)
		☐ BookPouchTests should properly test serialization/deserialization
		☐ When a book is opened, add it to the user's book pouch instance (from profile.BookPouch)
		☐ When a book pouch has something added to it or removed from it, it should trigger some sort of Changed event so that the gui code can update the list
		☐ Optionally, the gui can use ObjectList to maintain a row in the ScrollingFrame for each book in the list
		☐ The client should notify the server whenever a change is made; the server should verify the request (ex Assert.Integer(id)) and appropriately update the book pouch for that player

New Book Gui:
	For now we can add on to the existing book gui
	☐ favoriting a book
		☐ ImageButton star, like on Roblox's site. Change its icon when the change is confirmed (put it in a grayed out state while saving)
		☐ store it in the user's profile
		☐ store it in the book's list of people who have favourited it using UpdateAsync
	☐ mark book as read/unread
		☐ TextButton that grays out while confirming change; text must change to "Mark as Read"/"Mark as Unread"
		☐ store in user's profile
		☐ store/remove it in book's list of who's read it (UpdateAsync)
	☐ some way to add to "pouch"
	☐ need to rewrite the BookGui script

Consider these assets:
	Star = "rbxassetid://706790939"
	StarOutline = "rbxassetid://706767490"
	StarWithBorder = "rbxassetid://706767649"

--------------------------
Data Flow Plan (Profiles):
--------------------------
OnEnter:
	☐ DataStoreLoad -> profileData
	☐ Profile.Deserialize/Decode -> profile
	☐ profiles[player] = profile
	☐ fire profileLoaded for the player (can be created on demand; only fire if it exists)
	☐ mark when next autosave can occur

User clicks Music Off:
	✔ gui asks Music
	✔ Music gets a ref to the current profile and can check :IsMusicEnabled()
	✔ Music should then react to new value of MusicEnabled
	✔ ClientProfile uses remote to notify server of change
	✔ Server records it and marks profile as changed
	✔ activate autosave routine/queue as needed

User clicks a book:
	☐ book gui asks ClientProfile for fav/read/etc details
	☐ book gui asks BookContent module for content (which keeps it only while the book is in your inventory; maybe also the last book you had opened)
		☐ asks for content from server

Say we use the most basic table syntax (so it's simple to view/edit). What data could be stored in one key?
ex, Favorites=[1,532,531]
so if we assume there are 10k books and that each ID is 4 digits long, then we need 5 digits per favourite is ~50,000 characters and the limit is 260,000 characters!
So we could do that for now

Theme Editor:
	☐
	Bugs:
		☐ Update visual list of themes upon adding or removing
		☐ Remove existing theme rows when closing plugin/widget
		☐ Need to add Undo points after installationMc